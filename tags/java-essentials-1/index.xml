<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java Essentials 1 on MinhBlog</title><link>https://minhbodoivl.github.io/MinhBlog/tags/java-essentials-1/</link><description>Recent content in Java Essentials 1 on MinhBlog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 16 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://minhbodoivl.github.io/MinhBlog/tags/java-essentials-1/index.xml" rel="self" type="application/rss+xml"/><item><title>Bài viết 2 – Bước đầu vào thế giới lập trình hướng đối tượng</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post2/</link><pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Bài viết thứ hai, mình chính thức bước vào thế giới lập trình, nơi những dòng code đầu tiên bắt đầu có ý nghĩa.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;Java Essentials 1&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hiểu cú pháp cơ bản: biến, kiểu dữ liệu, cấu trúc chương trình.&lt;/li&gt;
&lt;li&gt;Thực hành viết chương trình, vòng lặp, và điều kiện.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Sau Bài viết đầu tiên làm quen với &lt;strong&gt;Networking Basics&lt;/strong&gt;, mình chính thức bước sang giai đoạn thứ hai của khoá học tại &lt;strong&gt;Cisco Networking Academy&lt;/strong&gt; – đó là &lt;strong&gt;Java Essentials 1&lt;/strong&gt;.&lt;br&gt;
Đây cũng là Bài viết đầu tiên mình thực sự &lt;em&gt;code nhiều&lt;/em&gt;, và bắt đầu cảm nhận “hơi thở” của ngôn ngữ lập trình Java.&lt;/p&gt;</description></item><item><title>Bài viết 3 - Khám phá lập trình hướng đối tượng trong Java (OOP)</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post3/</link><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post3/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Bài viết này, mình chính thức bước vào thế giới của OOP – nơi mọi thứ trong lập trình bắt đầu trở nên có tổ chức và thực tế hơn.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu rõ khái niệm &lt;strong&gt;lớp (class)&lt;/strong&gt; và &lt;strong&gt;đối tượng (object)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Nắm được &lt;strong&gt;constructor&lt;/strong&gt;, &lt;strong&gt;method&lt;/strong&gt;, và &lt;strong&gt;tính đóng gói (encapsulation)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Thực hành viết chương trình quản lý đơn giản bằng nhiều đối tượng.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Ban đầu, mình hơi “choáng” với hàng loạt khái niệm mới: &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;object&lt;/em&gt;, &lt;em&gt;method&lt;/em&gt;, &lt;em&gt;constructor&lt;/em&gt;, &lt;em&gt;encapsulation&lt;/em&gt;…&lt;br&gt;
Tuy nhiên, Cisco thiết kế bài học rất hợp lý — họ bắt đầu bằng ví dụ đời thường, như “một chiếc xe là một đối tượng có thuộc tính (màu, tốc độ) và hành vi (chạy, dừng)”.&lt;br&gt;
Nhờ vậy, mình nhanh chóng hiểu được:&lt;br&gt;
👉 &lt;strong&gt;Class giống như bản thiết kế&lt;/strong&gt;, còn &lt;strong&gt;Object là bản thể cụ thể được tạo ra từ bản thiết kế đó&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Bài viết 4 - Ôn tập điều kiện và vòng lặp trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post4/</link><pubDate>Wed, 24 Sep 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post4/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Bài viết này, mình quay lại với những khối kiến thức nền tảng – điều kiện và vòng lặp.&lt;br&gt;
Dù quen thuộc, nhưng khi học bằng Java, mọi thứ trở nên rõ ràng và chặt chẽ hơn.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ôn tập câu lệnh &lt;strong&gt;rẽ nhánh (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Thành thạo các &lt;strong&gt;vòng lặp (&lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Thực hành với những bài toán nhỏ như tính tổng, in bảng cửu chương, kiểm tra số nguyên tố.&lt;/li&gt;
&lt;li&gt;Hiểu rõ &lt;strong&gt;tư duy lặp&lt;/strong&gt; và &lt;strong&gt;điều kiện dừng&lt;/strong&gt; trong chương trình.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bài viết này giống như quay lại “gốc rễ” của lập trình – những cấu trúc điều khiển mà ngôn ngữ nào cũng có.&lt;br&gt;
Tuy nhiên, Java khiến mình thấy mọi thứ trở nên &lt;strong&gt;rõ ràng, chặt chẽ và có quy tắc hơn&lt;/strong&gt;.&lt;br&gt;
Mình đặc biệt thích cách Cisco thiết kế các ví dụ nhỏ: dễ hiểu, sát thực tế và giúp mình tự tay “cảm nhận” được vòng lặp hoạt động thế nào qua từng giá trị.&lt;/p&gt;</description></item><item><title>Bài viết 5 - Làm quen với mảng trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post5/</link><pubDate>Sun, 28 Sep 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post5/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Nếu biến là nơi chứa một giá trị, thì mảng là cả một dãy ngăn tủ — giúp mình quản lý nhiều giá trị cùng lúc.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu &lt;strong&gt;khái niệm và cách khai báo mảng trong Java&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Biết cách &lt;strong&gt;duyệt mảng&lt;/strong&gt; bằng &lt;code&gt;for&lt;/code&gt; và &lt;code&gt;for-each&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Áp dụng mảng để &lt;strong&gt;tính toán, tìm giá trị lớn nhất/nhỏ nhất, trung bình&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;mảng hai chiều&lt;/strong&gt; (matrix) – cơ sở cho nhiều ứng dụng thực tế.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bài viết này mình bắt đầu cảm nhận được &lt;strong&gt;sức mạnh thực sự của lập trình&lt;/strong&gt;: từ việc xử lý từng biến riêng lẻ sang &lt;strong&gt;làm việc với cả tập dữ liệu&lt;/strong&gt;.&lt;br&gt;
Ban đầu hơi rối vì cú pháp &lt;code&gt;[ ]&lt;/code&gt;, nhưng sau khi chạy vài ví dụ, mình thấy mảng khá dễ hiểu và cực kỳ tiện.&lt;/p&gt;</description></item><item><title>Bài viết 6 - Làm quen với phương thức (methods) trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post6/</link><pubDate>Wed, 01 Oct 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post6/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Một chương trình lớn không thể chỉ có một hàm main. Khi biết chia nhỏ công việc thành các phương thức, mình cảm giác như đang sắp xếp mọi thứ có trật tự hơn hẳn.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu &lt;strong&gt;khái niệm phương thức (method)&lt;/strong&gt; trong Java.&lt;/li&gt;
&lt;li&gt;Biết cách &lt;strong&gt;định nghĩa, gọi và truyền tham số&lt;/strong&gt; cho phương thức.&lt;/li&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;phương thức có giá trị trả về&lt;/strong&gt; (&lt;code&gt;return&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Ứng dụng phương thức để viết code &lt;strong&gt;tái sử dụng, gọn gàng, dễ bảo trì&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Sau khi làm quen với biến và mảng, Bài viết này mình nhận ra: nếu không chia code thành nhiều phần nhỏ thì rất khó kiểm soát.&lt;br&gt;
Phương thức giúp mình &lt;strong&gt;tổ chức logic chương trình&lt;/strong&gt; thành từng khối, mỗi khối chỉ làm một nhiệm vụ cụ thể.&lt;br&gt;
Cảm giác như từ “người viết từng dòng lệnh” chuyển thành “người thiết kế hệ thống”.&lt;/p&gt;</description></item><item><title>Bài viết 7 - Xử lý ngoại lệ (Exception Handling) trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post7/</link><pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post7/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Lần đầu tiên thấy chương trình không bị ‘crash’ dù nhập sai dữ liệu, mình mới thật sự hiểu sức mạnh của Exception Handling.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu &lt;strong&gt;khái niệm ngoại lệ (exception)&lt;/strong&gt; và tại sao cần xử lý chúng.&lt;/li&gt;
&lt;li&gt;Biết sử dụng &lt;strong&gt;try – catch – finally&lt;/strong&gt; để bắt và xử lý lỗi.&lt;/li&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;throw&lt;/strong&gt; và &lt;strong&gt;throws&lt;/strong&gt; để tạo và lan truyền ngoại lệ.&lt;/li&gt;
&lt;li&gt;Viết chương trình &lt;strong&gt;an toàn hơn, không dừng đột ngột khi gặp lỗi.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bài viết này, mình bắt đầu hiểu rằng không phải mọi lỗi đều là “bug” — có những lỗi xảy ra &lt;strong&gt;do dữ liệu người dùng nhập sai, do chia cho 0, hoặc do đọc file không tồn tại&lt;/strong&gt;.&lt;br&gt;
Nếu không xử lý, chương trình sẽ &lt;strong&gt;crash ngay lập tức&lt;/strong&gt;.&lt;br&gt;
Nhờ có &lt;code&gt;try-catch&lt;/code&gt;, Java cho phép &lt;strong&gt;kiểm soát tình huống lỗi&lt;/strong&gt; một cách nhẹ nhàng và chuyên nghiệp.&lt;/p&gt;</description></item><item><title>Bài viết 8 - Kế thừa (Inheritance) trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post8/</link><pubDate>Wed, 15 Oct 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post8/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Từ đây, mình bắt đầu cảm thấy code Java không chỉ là câu lệnh, mà là những mối quan hệ giữa các đối tượng – y như trong đời sống.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu &lt;strong&gt;khái niệm kế thừa (Inheritance)&lt;/strong&gt; trong lập trình hướng đối tượng.&lt;/li&gt;
&lt;li&gt;Biết cách &lt;strong&gt;tạo lớp con (subclass)&lt;/strong&gt; kế thừa thuộc tính &amp;amp; phương thức của lớp cha (superclass).&lt;/li&gt;
&lt;li&gt;Biết cách &lt;strong&gt;ghi đè phương thức (method overriding)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;từ khóa &lt;code&gt;super&lt;/code&gt; và &lt;code&gt;this&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bài viết này, mình nhận ra rằng &lt;strong&gt;kế thừa giúp tiết kiệm thời gian viết code&lt;/strong&gt; hơn rất nhiều.&lt;br&gt;
Thay vì viết lại toàn bộ thuộc tính và phương thức, mình chỉ cần &lt;strong&gt;kế thừa lớp có sẵn&lt;/strong&gt; rồi mở rộng thêm tính năng.&lt;br&gt;
Nó giống như việc “thêm tầng mới cho ngôi nhà đã có sẵn móng vững chắc”.&lt;/p&gt;</description></item><item><title>Bài viết 9 - Đa hình (Polymorphism) trong Java</title><link>https://minhbodoivl.github.io/MinhBlog/posts/post9/</link><pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate><guid>https://minhbodoivl.github.io/MinhBlog/posts/post9/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Đa hình khiến mình nhận ra rằng một hành động có thể mang nhiều hình thái khác nhau – giống như con người, cùng nói ‘chạy’, nhưng chạy bộ, chạy xe, hay chạy deadline đều khác nhau.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="-mục-tiêu"&gt;
 🎯 Mục tiêu
 &lt;a class="heading-link" href="#-m%e1%bb%a5c-ti%c3%aau"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hiểu khái niệm &lt;strong&gt;đa hình (Polymorphism)&lt;/strong&gt; trong Java.&lt;/li&gt;
&lt;li&gt;Phân biệt giữa &lt;strong&gt;compile-time&lt;/strong&gt; và &lt;strong&gt;runtime polymorphism&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Sử dụng &lt;strong&gt;ghi đè phương thức (method overriding)&lt;/strong&gt; và &lt;strong&gt;ép kiểu đối tượng (casting)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Làm quen với &lt;strong&gt;abstract class&lt;/strong&gt; và &lt;strong&gt;interface&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="-cảm-nhận-đầu-tiên"&gt;
 💡 Cảm nhận đầu tiên
 &lt;a class="heading-link" href="#-c%e1%ba%a3m-nh%e1%ba%adn-%c4%91%e1%ba%a7u-ti%c3%aan"&gt;
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading"&gt;&lt;/i&gt;
 &lt;span class="sr-only"&gt;Link to heading&lt;/span&gt;
 &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Bài viết này khá “mind-blowing” 🤯 — vì Java cho phép &lt;strong&gt;một đối tượng được tham chiếu bởi nhiều kiểu khác nhau&lt;/strong&gt;,&lt;br&gt;
và hành vi của nó &lt;strong&gt;phụ thuộc vào kiểu thực tế tại runtime&lt;/strong&gt; chứ không chỉ vào kiểu khai báo.&lt;br&gt;
Cisco minh họa bằng ví dụ cực hay:&lt;/p&gt;</description></item></channel></rss>